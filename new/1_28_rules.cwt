
#Just added all 1.28 (Golden Century) stuff in here for now.

types = {
	## type_key_filter = province
	type[ai_army] = {
		path = "game/common/ai_army"
		skip_root_key = province
	}
	## type_key_filter <> province
	type[ai_army_wrong] = {
		path = "game/common/ai_army"
	}
	type[flagship_modification] = {
		path = "game/common/flagship_modifications"
	}
	type[holy_order] = {
		path = "game/common/holy_orders"
	}
}


ai_army_wrong = {
}


###Scripts in ai_army can be used to influence how the army AI behaves when certain conditions (Defined in the "active" trigger) are met. It is intended not to control daily decision making of armies but to define a general attitude that will influence (or overwrite) hard-coded AI behaviour.
ai_army = {
	## replace_scope = { this = country root = country }
	###The "active" trigger (I.e. the trigger that decides what attitude is currently active) is evaluated when any of the following happens: * A war begins or ends. * A country gains or loses a province. * A year without wars or province changes passes.
	active = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## replace_scope = { this = province root = province }
	eval_multiply = {
		factor = float
		modifier = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
}




flagship_modification = {
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
    trigger = {
		alias_name[trigger] = alias_match_left[trigger]
    }
    modifier = {
		alias_name[modifier] = alias_match_left[modifier]
    }
	## cardinality = 0..1
    base_modification = yes
	
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
    ai_trade_score = {
        factor = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
    }
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
    ai_war_score = {
        factor = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
    }
}



holy_order = {
	icon = <sprite>

	## replace_scope = { this = country root = country }
	trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	cost = int
	cost_type = enum[holy_order_cost_types]

	## replace_scope = { this = province root = province }
    per_province_effect = {
        alias_name[effect] = alias_match_left[effect]
    }
	## replace_scope = { this = province root = province }
    per_province_abandon_effect = {
        alias_name[effect] = alias_match_left[effect]
    }
	## replace_scope = { this = province root = province }
    modifier = {
        alias_name[modifier] = alias_match_left[modifier]
    }
	## replace_scope = { this = province root = province }
    ai_priority = {
        factor = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
    }
}

enums = {
	enum[holy_order_cost_types] = {
		adm_power
		dip_power
		mil_power
	}
}



#triggers

## scope = province
###Checks if the listed holy order is present in the province
alias[trigger:holy_order] = <holy_order>


## scope = country
###Checks if the country has a flagship (not a captured one)
alias[trigger:has_flagship] = bool

## scope = province
alias[trigger:expelling_minorities] = bool


#effects



