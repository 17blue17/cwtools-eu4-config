
## push_scope = province
###Refers to the province ids listed /Europa Universalis IV/map/definition.csv
alias[effect:<province_id>] = {
	alias_name[effect] = alias_match_left[effect]
}

## push_scope = province
###Refers to the province ids listed /Europa Universalis IV/map/definition.csv
alias[effect:<area>] = {
	alias_name[effect] = alias_match_left[effect]
}

## push_scope = province
###Refers to any region found in /Europa Universalis IV/map/region.txt
alias[effect:<region>] = {
	alias_name[effect] = alias_match_left[effect]
}

## push_scope = province
###Refers to any superregion found in /Europa Universalis IV/map/superregion.txt
alias[effect:<superregion>] = {
	alias_name[effect] = alias_match_left[effect]
}

# push_scope = province
#Refers to any province group found in /Europa Universalis IV/map/provincegroup.txt
#alias[effect:<provincegroup>] = {
#	alias_name[effect] = alias_match_left[effect]
#}

## push_scope = province
###Refers to any continent found in /Europa Universalis IV/map/continent.txt
alias[effect:<continent>] = {
	alias_name[effect] = alias_match_left[effect]
}

## push_scope = province
###Refers to any trade company found in /Europa Universalis IV/common/trade_companies/
alias[effect:<trade_company>] = {
	alias_name[effect] = alias_match_left[effect]
}

## push_scope = province
###Refers to any colonial region found in /Europa Universalis IV/common/colonial_regions/
alias[effect:<colonial_region>] = {
	alias_name[effect] = alias_match_left[effect]
}

alias[effect:event_target:scalar] = {
	alias_name[effect] = alias_match_left[effect]
}






## push_scope = province
###Refers to the province ids listed /Europa Universalis IV/map/definition.csv
alias[trigger:<province_id>] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## push_scope = province
###Refers to the province ids listed /Europa Universalis IV/map/definition.csv
alias[trigger:<area>] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## push_scope = province
###Refers to any region found in /Europa Universalis IV/map/region.txt
alias[trigger:<region>] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## push_scope = province
###Refers to any superregion found in /Europa Universalis IV/map/superregion.txt
alias[trigger:<superregion>] = {
	alias_name[trigger] = alias_match_left[trigger]
}

# push_scope = province
#Refers to any province group found in /Europa Universalis IV/map/provincegroup.txt
#alias[trigger:<provincegroup>] = {
#	alias_name[trigger] = alias_match_left[trigger]
#}

## push_scope = province
###Refers to any continent found in /Europa Universalis IV/map/continent.txt
alias[trigger:<continent>] = {
	alias_name[trigger] = alias_match_left[trigger]
}


## push_scope = province
###Refers to any trade company found in /Europa Universalis IV/common/trade_companies/
alias[trigger:<trade_company>] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## push_scope = province
###Refers to any colonial region found in /Europa Universalis IV/common/colonial_regions/
alias[trigger:<colonial_region>] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:event_target:scalar] = {
	alias_name[trigger] = alias_match_left[trigger]
}




effects:


## scope = country	
###Spawns a specific unit (e.g. "british_redcoat") for the current scope in the defined province scope. Units can be found in /Europa Universalis IV/common/units/*.txt.	
alias[effect:<unit_type>] = scope[province]	
	
## scope = province	
###Spawns a specific unit in the current province scope for the defined country scope. Units can be found in /Europa Universalis IV/common/units/*.txt.	
alias[effect:<unit_type>] = scope[country]	
	
## scope = province	
###Spawns a specific unit in the current province scope for the defined country scope. Units can be found in /Europa Universalis IV/common/units/*.txt.	
alias[effect:<unit_type>] = enum[country_tags]	



triggers

## scope = country
###Returns true if the country has a tolerance of at least X of the specified religion. Note: No correct localisation.	
alias[trigger:<religion.not_school>] = int	
