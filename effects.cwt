
alias[effect:<scripted_effect>] = yes

#Variables

alias[effect:export_to_variable] = {
	which = scalar #todo: Variable
	value = enum[export_to_variable_data]
	## cardinality = 0..1
	who = scope[country]
	## cardinality = 0..1
	with = scope[country] #for when you use "trust"
}

alias[effect:multiply_variable] = {
	which = scalar #todo: Variable
	value = float
}

alias[effect:change_variable] = {
	which = scalar #todo: Variable
	value = float
}

alias[effect:subtract_variable] = {
	which = scalar #todo: Variable
	value = float
}



#Anywhere Effects

## scope = any
###Defines a global flag.
alias[effect:set_global_flag] = scalar

## scope = any
###Clears a defined global flag.
alias[effect:clr_global_flag] = scalar

## scope = any
###Displays a localized key in the effect tooltip.
alias[effect:custom_tooltip] = localisation


## scope = any
###Displays a string (specified here in "") in the game.log when executed. Accepts all localization commands (i.e. [Root.GetName], etc)
alias[effect:log] = scalar

## scope = any
###Saves the current scope as a key to be used in further effects/triggers and in localisations. Is cleared once execution ends (i.e. end of event and any events subsequently triggered by this event). Use event_target:<key> to access the scope.
alias[effect:save_event_target_as] = scalar

## scope = any
###Saves the current scope as a key to be used in further effects/triggers and in localisations. Is NOT cleared once execution ends, but rather is kept until cleared with clear_global_event_target. Use event_target:<key> to access the scope.
alias[effect:save_global_event_target_as] = scalar

## scope = any
###Clears a specific global event target.
alias[effect:clear_global_event_target] = scalar

## scope = any
###Clears all global event targets.
alias[effect:clear_global_event_targets] = yes

## scope = any
###Displays a hidden ambient object from the map/ambient_objects.txt file.
alias[effect:show_ambient_object] = <ambient_object> #TODO

## scope = any
###Hides a visible ambient object from the map/ambient_objects.txt file.
alias[effect:hide_ambient_object] = <ambient_object> #TODO




## scope = country
###Fire a country event for the current country scope. You cannot fire the same event within itself.
alias[effect:country_event] = {
	id = <event.country>
	## cardinality = 0..1
	###The number of days to wait after the effect is executed to fire the event.
	days = int
	## cardinality = 0..1
	###The max number of additional days that can be added to the days parameter for randomness.
	random = int
	## cardinality = 0..1
	###The tooltip to display in the effect tooltip country_event is used in.
	tooltip = localisation
}


## scope = country
###Adds modifier to the current scope as a country modifier.
alias[effect:add_country_modifier] = {
	name = <country_modifier> #todo
	## cardinality = 0..1
	###The number of days to add the country modifier for.
	days = int
	## cardinality = 0..1
	###The number of days to add the country modifier for.
	hidden = yes
	## cardinality = 0..1
	###The string used to override the automatic duration string.
	desc = localisation
}

## scope = country
###Removes an already assigned country modifier from the current scope.
alias[effect:remove_country_modifier] = <country_modifier>

## scope = country
###A unique string to identify the country flag with. Flags can be appended with scopes or event targets: set_country_flag = my_flag@ROOT
alias[effect:set_country_flag] = scalar

## scope = country
###Clears a defined country flag for the current scope.
alias[effect:clr_country_flag] = scalar

## scope = country
###Changes current scope to <scope> tag.
alias[effect:change_tag] = <country_tag>
alias[effect:change_tag] = scope[country]

## scope = country
###Switches the player view to <scope> tag. Original country becomes controlled by AI.
alias[effect:switch_tag] = <country_tag>
alias[effect:switch_tag] = scope[country]

## scope = country
###Changes the current scope's graphical culture. Graphical culture determines the unit models, advisor portraits, etc that a country uses. Graphical cultures are found in /Europa Universalis IV/common/graphicalculturetype.txt.
alias[effect:change_graphical_culture] = <graphical_culture> #todo

## scope = country
###Adds Administrative power to the current scope.
alias[effect:add_adm_power] = int

## scope = country
###Adds Diplomatic power to the current scope.
alias[effect:add_dip_power] = int

## scope = country
###Adds Military power to the current scope.
alias[effect:add_mil_power] = int

## scope = country
###Saves a name to an unique key for usage in other effects. Usable with define_admiral, define_explorer, define_conquistador, define_general, define_ruler, define_consort, define_heir, define_advisor and spawn_rebels.
alias[effect:set_saved_name] = {
	key = scalar #todo: make sure this name is remembered and can be checked elsewhere, kinda like variables
	type = advisor
	type = simple
	## cardinality = 0..1
	###Only with type = advisor
	scope = scope[country]
	## cardinality = 0..1
	###Only with type = advisor
	scope = <country_tag>
	
	## cardinality = 0..1
	name = scalar
}

## scope = country
###Clears a saved name key. Use this after using the saved name in an effect.
alias[effect:clear_saved_name] = scalar #todo


#Country Economy stuff

## scope = country
###Adds ducats equal to the years of income defined. 1 is equal to 1 year of income, based of a country's current monthly income.
alias[effect:add_years_of_income] = float

## scope = country
###Adds ducats to the current scope. Can also subtract.
alias[effect:add_treasury] = int

## scope = country
###Adds inflation to the current scope. Can also subtract.
alias[effect:add_inflation] = float

## scope = country
###Adds mercantilism to the current scope. Can also subtract.
alias[effect:add_mercantilism] = int

## scope = country
###Adds tariff value to to the current scope. Tariff value is the ducats sent to an overlord by subjects such as colonial nations. Can also subtract.
alias[effect:add_tariff_value] = float

## scope = country
###Changes the loan size of the current scope. Size is the number of months in monthly income that a single loan is equal to.
alias[effect:loan_size] = int[1..inf]

## scope = country
###Changes the price of a trade good globally. Tradegood prices are found in /Europa Universalis IV/common/prices/*.txt. The new price is the base price + (base price * value). Duration accepts -1 for unlimited duration.
alias[effect:change_price] = {
	trade_goods = <trade_good>
	###The localisation key to display in the Trade Good's price tooltip.
	key = localisation
	###The percentage to change the value by.
	value = float
	###The duration for the value to stay changed for. -1 = infinite.
	duration = int
}


#Country Government stuff

## scope = country
###Adds absolutism to the current scope. Can also subtract. No effect if Absolutism isn't active.
alias[effect:add_absolutism] = int

## scope = country
###Adds legitimacy to the current scope. Can also subtract. Target can be a country, in which case that country's legitimacy value is used. No effect if not a government monarchy.
alias[effect:add_legitimacy] = int
alias[effect:add_legitimacy] = scope[country]
alias[effect:add_legitimacy] = <country_tag>

## scope = country
###Adds republican tradition to the current scope. No effect if not a government using republic.
alias[effect:add_republican_tradition] = int

## scope = country
###Adds republican tradition to the current scope. Scales to the government's election cycle duration. No effect if not a government using republic.
alias[effect:add_scaled_republican_tradition] = int

## scope = country
###Adds devotion to the current scope. No effect if not a government using has_devotion.
alias[effect:add_devotion] = int

## scope = country
###Adds horde unity to the current scope. No effect if not a government using nomad.
alias[effect:add_horde_unity] = int

## scope = country
###Adds meritocracy to the current scope. No effect if not a government using has_meritocracy.
alias[effect:add_meritocracy] = int

## scope = country
###Sets the current meritocracy for the current scope. No effect if not a government using has_meritocracy.
alias[effect:set_meritocracy] = int

## scope = country
###Adds militarisation to the current scope. No effect if not a government using militarised_society.
alias[effect:add_militarised_society] = int

## scope = country
###Adds tribal allegiance to the current scope. No effect if not a government using tribal_federation_mechanic.
alias[effect:add_tribal_allegiance] = int

## scope = country
###Changes the Organist-Statist balance. Positive moves towards Orangist, negative moves towards Statists.
alias[effect:change_statists_vs_orangists] = int

## scope = country
###Changes the government of the current scope. Governments are found in /Europa Universalis IV/common/governments/*.txt.
alias[effect:change_government] = <government>

## scope = country
###Changes the government rank of the current scope. Default range is 1 to 3.
alias[effect:set_government_rank] = int[1..3]

## scope = country
###Changes the pool size of one of the power pools within a government mechanic.
alias[effect:add_government_power] = {
	###Which government mechanic to add power to.
	government_mechanic = enum[government_mechanics] #todo: is this a type?
	which = enum[power_types]
	amount = int
}

## scope = country
###Changes the current scope's government and rank at the same time. Governments are found in /Europa Universalis IV/common/governments/*.txt. Will respect that governments have fixed ranks and the maximum ranks for subject types.
alias[effect:set_government_and_rank] = {
	government = <government>
	rank = int
}

## scope = country
###Disables the Parliament mechanic. Only affects governments with has_parliament.
alias[effect:dissolve_parliament] = yes

## scope = country
###Re-enables the Parliament mechanic after dissolve_parliament. Only affects governments with has_parliament.
alias[effect:reinstate_parliament] = yes


#Country Culture stuff

## scope = country
###Adds a new accepted culture to the current scope. Cultures are found in /Europa Universalis IV/common/cultures/*.txt.
alias[effect:add_accepted_culture] = <culture.fixed>
alias[effect:add_accepted_culture] = scope[country]
alias[effect:add_accepted_culture] = <country_tag>
#todo: variable:my_variable

## scope = country
###Changes the primary culture of the current scope. Cultures are found in /Europa Universalis IV/common/cultures/*.txt.
alias[effect:change_primary_culture] = <culture.fixed>
alias[effect:change_primary_culture] = scope[country]
alias[effect:change_primary_culture] = <country_tag>
#todo: variable:my_variable

## scope = country
###Removes an accepted culture from the current scope. Cultures are found in /Europa Universalis IV/common/cultures/*.txt.
alias[effect:remove_accepted_culture] = <culture.fixed>
alias[effect:remove_accepted_culture] = scope[country]
alias[effect:remove_accepted_culture] = <country_tag>
#todo: variable:my_variable


#Country Religion stuff

## scope = country
###Changes the religion of the current scope. Religions are found in /Europa Universalis IV/common/religions/*.txt
alias[effect:change_religion] = <culture.fixed>
alias[effect:change_religion] = scope[country]
alias[effect:change_religion] = <country_tag>
#todo: variable:my_variable

## scope = country
###Enables a religion that has been restricted with the date parameter. Religions are found in /Europa Universalis IV/common/religions/*.txt
alias[effect:enable_religion] = <culture.fixed>

## scope = country
###Sets whether the current scope has been force converted. 
alias[effect:force_converted] = bool

## scope = country
###Adds authority to the current scope. Used in Religious Reforms that use authority. No effect if the country does not hold a religion using authority.
alias[effect:add_authority] = int

## scope = country
###Adds doom to the current scope. Used in Religious Reforms that use doom. No effect if the country does not hold a religion using doom.
alias[effect:add_doom] = int

## scope = country
###Removes taken religious reforms from the current scope. No effect if the country does not hold a religion using religious_reforms.
alias[effect:remove_religious_reforms] = int

## scope = country
###Adds Fervor to the current scope. No effect if the country does not hold a religion using fervor.
alias[effect:add_fervor] = int

## scope = country
###Adds Karma to the current scope. No effect if the country does not hold a religion using uses_karma.
alias[effect:add_karma] = int

## scope = country
###Sets the Karma value for the current scope. No effect if the country does not hold a religion using uses_karma.
alias[effect:set_karma] = int

## scope = country
###Adds Church Power to the current scope. No effect if the country does not hold a religion using uses_church_power.
alias[effect:add_church_power] = int

## scope = country
###Adds the defined aspect to the current scope. Church Aspects are found in /Europa Universalis IV/common/church_aspects/00_church_aspects.txt. No effect if the country does not hold a religion using uses_church_power and the aspect set in aspects. Does not work with Blessings.
alias[effect:add_church_aspect] = <church_aspect> #todo

## scope = country
###Removes the defined aspect from the current scope. Church Aspects are found in /Europa Universalis IV/common/church_aspects/00_church_aspects.txt. No effect if the country does not hold a religion using uses_church_power and the aspect set in aspects. Does not work with Blessings.
alias[effect:remove_church_aspect] = <church_aspect> #todo
alias[effect:remove_church_aspect] = random

## scope = country
###Adds Papal Influence to the current scope. No effect if the country does not hold a religion using papacy.
alias[effect:add_papal_influence] = int

## scope = country
###Adds or subtracts Catholic Reform Desire.
alias[effect:add_reform_desire] = float

## scope = country
###Excommunicates the defined scope. If already excommunicated, removes excommunication.
alias[effect:excommunicate] = scope[country]
alias[effect:excommunicate] = <country_tag>

## scope = country
###Enables or disables the Papacy mechanic.
alias[effect:set_papacy_active] = bool

## scope = country
###Adds Piety to the current scope. No effect if the country does not hold a religion using uses_piety
alias[effect:add_piety] = float

## scope = country
###Changes the current scope's school opinion towards the defined scope's school. -1 for negative, 0 for netural and 1 for positive.
alias[effect:set_school_opinion] = {
	who = scope[country]
	who = <country_tag>
	opinion = int[-1..1]
}

## scope = country
###Adds Patriarch Authority to the current scope. No effect if the country does not hold a religion using has_patriarchs.
alias[effect:add_patriarch_authority] = int[-100..100]

## scope = country
###Changes the current personal deity for the current scope. Personal Deities are found in /Europa Universalis IV/common/personal_deities/*.txt. No effect if the country does not hold a religion using personal_deity.
alias[effect:change_personal_deity] = <personal_deity> #todo

## scope = country
###Adds Harmony to the current scope. No effect if the country does not hold a religion using uses_harmony.
alias[effect:add_harmony] = int

## scope = country
###Adds a religion to the list of Harmonized religions for the current scope. No effect if the country does not hold a religion using uses_harmony.
alias[effect:add_harmonized_religion] = <religion.not_school>

## scope = country
###Adds Harmonization Progress for the current harmonization target to the current scope. No effect if the country does not hold a religion using uses_harmony.
alias[effect:add_harmonization_progress] = int[-100..100]

## scope = country
###Adds the defined cult to the current scope. Cults can be found in /Europa Universalis IV/common/fetishist_cults/*.txt. No effect if the country does not hold a religion using fetishist_cult.
alias[effect:unlock_cult] = <cult>

## scope = country
###Adds Isolationism to the current scope. No effect if the country does not hold a religion using uses_isolationism.
alias[effect:add_isolationism] = int

## scope = country
###Sets Isolationism to the current scope. No effect if the country does not hold a religion using uses_isolationism.
alias[effect:set_isolationism] = int

## scope = country
###Changes the value of an Incident for the current scope. Incidents are found in /Europa Universalis IV/common/isolationism/*.txt
alias[effect:add_incident_variable_value] = {
	incident = <incident> #todo
	value = int
}

## scope = country
###Sets the value of an Incident for the current scope. Incidents are found in /Europa Universalis IV/common/isolationism/*.txt
alias[effect:set_incident_variable_value] = {
	incident = <incident> #todo
	value = int
}


#Country Technology stuff

## scope = country
###Adds an idea for the current scope. Ideas are found in /Europa Universalis IV/common/ideas/*.txt. Won't work if the idea isn't present in a National Idea set or a taken Idea groups set for the country
alias[effect:add_idea] = <idea>

## scope = country
###Adds an idea group for the current scope. Idea groups are found in /Europa Universalis IV/common/ideas/*.txt. Won't work if the country doesn't have any free idea group slots.
alias[effect:add_idea_group] = <idea_group>

## scope = country
###Adds a policy for the current scope. Policies are found in /Europa Universalis IV/common/policies/*.txt. Won't work if the policy triggers are not met by the country, or there are no free policy slots.
alias[effect:add_active_policy] = <policy>

## scope = country
###Changes the technology group of the current scope. Technology Groups are found in /Europa Universalis IV/common/technology.txt.. Doesn't change units, use change_unit_type.
alias[effect:change_technology_group] = <technology_group> #todo

## scope = country
###Removes an idea for the current scope. Ideas are found in /Europa Universalis IV/common/ideas/*.txt.
alias[effect:remove_idea] = <idea>

## scope = country
###Removes an idea group for the current scope. Idea groups are found in /Europa Universalis IV/common/ideas/*.txt.
alias[effect:remove_idea_group] = <idea_group>

## scope = country
###Primitive status for the current scope. Primitive status controls whether a country has ships and if they can see Primitive-only mechanics, such as Religious Reforms.
alias[effect:set_primitive] = bool

## scope = country
###Re-evaluates the current scope's national idea set assignment, if they match a different set, they will switch to it. Used after tag changes to change National Idea sets.
alias[effect:swap_free_idea_group] = bool

## scope = country
###Adds embracement for the current progressing institution within the current scope. Institutions are found in /Europa Universalis IV/common/institutions/*.txt.
alias[effect:add_next_institution_embracement] = int[0..100]

## scope = country
###Adds ADM technologies to the current scope. You cannot remove technologies.
alias[effect:add_adm_tech] = int

## scope = country
###Adds DIP technologies to the current scope. You cannot remove technologies.
alias[effect:add_dip_tech] = int

## scope = country
###Adds MIL technologies to the current scope. You cannot remove technologies.
alias[effect:add_mil_tech] = int


#Country Court stuff

## scope = country
###Adds prestige to the current scope. Can also subtract.
alias[effect:add_prestige] = float

## scope = country
###Adds corruption to the current scope. Can also subtract.
alias[effect:add_corruption] = float

## scope = country
###Adds splendor to the current scope. Splendor is used to purchase Age abilities. Can also subtract.
alias[effect:add_splendor] = int

## scope = country
###Adds the defined advisor to the current scope. Defaults the advisor's location to the capital, and religion and culture to the current scope's.
alias[effect:create_advisor] = <advisor_type>

## scope = country
###Kills a hired advisor for the current scope. Advisor types are found in /Europa Universalis IV/common/advisortypes/*.txt. Displays the advisor death message box when used. Only works for advisors that have been hired.
alias[effect:kill_advisor] = <advisor_type>
alias[effect:kill_advisor] = random
alias[effect:kill_advisor] = <advisor_id> #todo

## scope = country
###Removes a hired advisor for the current scope. Advisor types are found in /Europa Universalis IV/common/advisortypes/*.txt. Does not display the advisor death message box when used. Only works for advisors that have been hired.
alias[effect:remove_advisor] = <advisor_type>
alias[effect:remove_advisor] = random
alias[effect:remove_advisor] = <advisor_id> #todo

## scope = country
###Removes a hired advisor of a monarch power type for the current scope.
alias[effect:remove_advisor_by_category] = [power_types]

## scope = country
###Adds the defined advisor to the current scope. Advisor types are found in /Europa Universalis IV/common/advisortypes/*.txt. Can utilise Event Scope Values for the culture and religion parameters. The name parameter can accept a saved name variable, see set_saved_name for more context.
alias[effect:define_advisor] = {
	type = <advisor_type> #todo
	skill = int[1..3]
	## cardinality = 0..1
	name = scalar #todo: name or saved name
	## cardinality = 0..1
	discount = yes
	## cardinality = 0..1
	culture = <culture.fixed>
	## cardinality = 0..1
	culture = scope[country]
	## cardinality = 0..1
	religion = <religion.not_school>
	## cardinality = 0..1
	religion = scope[country]
	## cardinality = 0..1
	female = bool
}


#Country Stability stuff

## scope = country
###Adds stability to the current scope.
alias[effect:add_stability] = int

## scope = country
###Adds war exhaustion to the current scope.
alias[effect:add_war_exhaustion] = int

## scope = country
###Adds liberty desire to the current scope.
alias[effect:add_liberty_desire] = int

## scope = country
###Disbands all active rebels of the specified type in the provinces of the current scope. Rebel types are found in /Europa Universalis IV/common/rebel_types/*.txt
alias[effect:disband_rebels] = <rebel_type>

## scope = country
###Causes owned cores of the current scope to be released as nations and for them to take a percentage of the current scope's owned provinces.
alias[effect:collapse_nation] = yes

## scope = country
###Applies an event modifier to the current scope that is removed when the disaster is over, or the duration runs out. Disasters are found in /Europa Universalis IV/common/disasters/*.txt
alias[effect:add_disaster_modifier] = {
	name = <event_modifier> #todo
	duration = int
	disaster = <disaster>
}

## scope = country
###Adds progress towards an already declared (conditions for disaster are met since at least a month) disaster 	Disasters are found in /Europa Universalis IV/common/disasters/*.txt
alias[effect:add_disaster_progress] = {
	value = int
	disaster = <disaster>
}

## scope = country
###Immediately ends an active disaster for the current scope. Disasters are found in /Europa Universalis IV/common/disasters/*.txt
alias[effect:end_disaster] = <disaster>


#Country Military stuff

## scope = country
###Adds Army Tradition to the current scope.
alias[effect:add_army_tradition] = int

## scope = country
###Adds Navy Tradition to the current scope.
alias[effect:add_navy_tradition] = int

## scope = country
###Adds Army Professionalism to the current scope.
alias[effect:add_army_professionalism] = float[0.0..1.0]

## scope = country
###Adds manpower to the current scope. 1 is equal to 1000 manpower.
alias[effect:add_manpower] = float[0.1..999.0] #I am assuming no one wants to add 1,000,000 manpower to a country

## scope = country
###Adds sailors to the current scope. 1 is equal to 1 sailor.
alias[effect:add_sailors] = int

## scope = country
###Adds manpower to the current scope, as a percentage of total yearly manpower. 1 is equal to 100% of total yearly manpower.
alias[effect:add_yearly_manpower] = float[0.1..10.0] #I am assuming no one wants to add more than 10 years of manpower to a country

## scope = country
###Adds sailors to the current scope, as a percentage of total yearly sailors. 1 is equal to 100% of total yearly sailors.
alias[effect:add_yearly_sailors] = float[0.1..10.0] #I am assuming no one wants to add more than 10 years of manpower to a country

## scope = country
###Generates an new admiral for the current scope. The number is the amount of navy tradition to use in generation.
alias[effect:create_admiral] = int[0..100]

## scope = country
###Generates an new explorer for the current scope. The number is the amount of navy tradition to use in generation.
alias[effect:create_explorer] = int[0..100]

## scope = country
###Generates an new conquistador for the current scope. The number is the amount of army tradition to use in generation.
alias[effect:create_conquistador] = int[0..100]

## scope = country
###Generates an new general for the current scope. The number is the amount of army tradition to use in generation.
alias[effect:create_general] = int[0..100]






#Province Colonisation stuff

## scope = province
###Starts a colony belonging to the owner of the ROOT province scope. Use with e.g. random_empty_neighbor_province
alias[effect:create_colony] = int

## scope = province
###Adds settlers to the current province scope of a colony.
alias[effect:add_colonysize] = int

## scope = province
###Multiplies the settler count in the current province scope of a colony.
alias[effect:multiply_colonysize] = float

## scope = province
###Adds to the Native Ferocity within an uncolonized provinceStarts a siberian colony in the current province scope. Only works if the ROOT scope is a country that can use Siberian Frontiers.
alias[effect:add_siberian_construction] = int

## scope = province
###Adds to the Native Ferocity within an uncolonized province.
alias[effect:change_native_ferocity] = int

## scope = province
###Adds to the Native Hostileness within an uncolonized province.
alias[effect:change_native_hostileness] = int

## scope = province
###Adds to the amount of natives within an uncolonized province.
alias[effect:change_native_size] = int

## scope = province
###The defined scope gains vision over the current province scope. Best used within areas, regions, etc to add vision.
alias[effect:discover_country] = scope[country]
alias[effect:discover_country] = <country_tag>

## scope = province
###The defined scope loses vision over the current province scope. Best used within areas, regions, etc to remove vision.
alias[effect:undiscover_country] = scope[country]
alias[effect:undiscover_country] = <country_tag>


#Province Diplomacy stuff

## scope = province
###The defined scope gains a claim on the current province scope.
alias[effect:add_claim] = scope[country]
alias[effect:add_claim] = <country_tag>

## scope = province
###The defined scope gains a core on the current province scope.
alias[effect:add_core] = scope[country]
alias[effect:add_core] = <country_tag>

## scope = province
###Starts core construction in the current province scope, for the current owner.
alias[effect:add_core_construction] = yes
	
## scope = province
###The defined scope gains a permanent claim on the current province scope.
alias[effect:add_permanent_claim] = scope[country]
alias[effect:add_permanent_claim] = <country_tag>

## scope = province
###The defined scope gains a territorial core on the current province scope.
alias[effect:add_territorial_core] = scope[country]
alias[effect:add_territorial_core] = <country_tag>

## scope = province
###The defined scope gains ownership of the current province scope. previous_owner can be used to cede ownership to the last previous owner of a province.
alias[effect:cede_province] = scope[country]
alias[effect:cede_province] = <country_tag>
alias[effect:cede_province] = previous_owner

## scope = province
###The defined scope gains control over the current province scope. Control here means occupation, not ownership.
alias[effect:change_controller] = scope[country]
alias[effect:change_controller] = <country_tag>

## scope = province
###The defined scope loses their claim on the current province scope. Works for both types of claims.
alias[effect:remove_claim] = scope[country]
alias[effect:remove_claim] = <country_tag>

## scope = province
###The defined scope loses their core on the current province scope.
alias[effect:remove_core] = scope[country]
alias[effect:remove_core] = <country_tag>

## scope = province
###The defined scope loses their territorial core on the current province scope.
alias[effect:remove_territorial_core] = scope[country]
alias[effect:remove_territorial_core] = <country_tag>

	
#Province Military Stuff

## scope = province
###Spawns an artillery unit in the current province scope for the defined country scope. Uses the currently selected artillery unit.
alias[effect:artillery] = scope[country]
alias[effect:artillery] = <country_tag>

## scope = province
###Spawns an infantry unit in the current province scope for the defined country scope. Uses the currently selected infantry unit.
alias[effect:infantry] = scope[country]
alias[effect:infantry] = <country_tag>

## scope = province
###Spawns a cavalry unit in the current province scope for the defined country scope. Uses the currently selected cavalry unit.
alias[effect:cavalry] = scope[country]
alias[effect:cavalry] = <country_tag>

## scope = province
###Spawns a mercenary infantry unit in the current province scope for the defined country scope. Uses the currently selected infantry unit.
alias[effect:mercenary_infantry] = scope[country]
alias[effect:mercenary_infantry] = <country_tag>

## scope = province
###Spawns a mercenary cavalry unit in the current province scope for the defined country scope. Uses the currently selected cavalry unit.
alias[effect:mercenary_cavalry] = scope[country]
alias[effect:mercenary_cavalry] = <country_tag>

## scope = province
###Spawns a streltsy infantry unit in the current province scope for the defined country scope. Uses the currently selected infantry unit.
alias[effect:streltsy_infantry] = scope[country]
alias[effect:streltsy_infantry] = <country_tag>

## scope = province
###Spawns a cossack cavalry unit in the current province scope for the defined country scope. Uses the currently selected cavalry unit.
alias[effect:cossack_cavalry] = scope[country]
alias[effect:cossack_cavalry] = <country_tag>


## scope = province
###Spawns a heavy ship unit in the current province scope for the defined country scope. Uses the defined scope's current transport ship unit. Requires the current province scope to have a port.
alias[effect:heavy_ship] = scope[country]
alias[effect:heavy_ship] = <country_tag>

## scope = province
###Spawns a light ship unit in the current province scope for the defined country scope. Uses the defined scope's current transport ship unit. Requires the current province scope to have a port.
alias[effect:light_ship] = scope[country]
alias[effect:light_ship] = <country_tag>

## scope = province
###Spawns a galley ship unit in the current province scope for the defined country scope. Uses the defined scope's current transport ship unit. Requires the current province scope to have a port.
alias[effect:galley] = scope[country]
alias[effect:galley] = <country_tag>

## scope = province
###Spawns a transport ship unit in the current province scope for the defined country scope. Uses the defined scope's current transport ship unit. Requires the current province scope to have a port.
alias[effect:transport] = scope[country]
alias[effect:transport] = <country_tag>

## scope = province
###Spawns a specific unit in the current province scope for the defined country scope. Units can be found in /Europa Universalis IV/common/units/*.txt.
alias[effect:<unit_name>] = scope[country]
alias[effect:<unit_name>] = <country_tag>
#todo: did I use unit_name before? (E.g. is "British Redcoats")

	
## scope = province
###Kills a leader in the current province scope if they match the type used. Only works if the leader is assigned to a unit that is stationed in the current province.
alias[effect:kill_leader] = enum[military_leader_types]
alias[effect:kill_leader] = random
alias[effect:kill_leader] = scalar #todo: name
	
## scope = province
###Kills units following the defined parameters in the current province scope. In the who parameter, you can use enemy, owner and controller. When used with no parameters, will kill all units within the current province scope.
alias[effect:kill_units] = {
	who = enemy
	who = owner
	who = controller
	## cardinality = 0..1
	type = enum[unit_types]
	## cardinality = 0..1
	type = <unit_name>
	## cardinality = 0..1
	amount = int
}


## scope = province
###Builds the defined units as a percentage of the owner's forcelimit in the current province scope. 1 is equal to 100% of the owner's forcelimit.
alias[effect:add_unit_construction] = {
	type = enum[unit_types] #todo: is this necessary?
	type = <unit_name>
	###The cost percentage of the base unit construction cost to use.
	cost = float
	###The speed percentage of the base unit construction speed to use.
	speed = float
	## cardinality = 0..1
	mercenary = yes
}


## scope = province
###Builds the defined units as a percentage of the owner's forcelimit in the current province scope. 1 is equal to 100% of the owner's forcelimit.
alias[effect:build_to_forcelimit] = {
	## cardinality = 0..1
    infantry = float
	## cardinality = 0..1
    cavalry = float
	## cardinality = 0..1
    artillery = float
	## cardinality = 0..1
    heavy_ship = float
	## cardinality = 0..1
    light_ship = float
	## cardinality = 0..1
    galley = float
	## cardinality = 0..1
    transport = float
	## cardinality = 0..1
    <unit_name> = float #todo
}

## scope = province
###Removes loot from the current province scope and grants it to the defined country scope. The who parameter accepts enemy, which distributes the loot to all current enemies of the province owner.
alias[effect:remove_loot] = {
	who = scope[country]
	who = <country_tag>
	who = enemy
	amount = int
}

## scope = province
###Changes the siege progress in the current province scope.
alias[effect:change_siege] = int




## scope = province
###Recalls a placed merchant in the current tradenode province scope.  Only works when the current province scope is the location of a tradenode center.
#Todo: Find a way of checking that
alias[effect:recall_merchant] = scope[country]
alias[effect:recall_merchant] = <country_tag>

## scope = province
###Adds income to the current tradenode province scope. Only works when the current province scope is the location of a tradenode center.
#Todo: Find a way of checking that
alias[effect:add_trade_node_income] = int

## scope = province
###Adds a trade modifier for the defined country scope in the current tradenode province scope. Can be added to any province within a tradenode.
alias[effect:add_trade_modifier] = {
	who = scope[country]
	###The duration of the modifier.
	duration = int
	###The amount of trade power to add or subtract.
	power = float
	###The key to display as the modifier in the tooltip.
	key = localisation	#todo: check not trade_modifier
}

## scope = province
###Removes a trade modifier for the defined country scope in the current tradenode province scope.
alias[effect:remove_trade_modifier] = {
	who = scope[country]
	key = localisation
}
